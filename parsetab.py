
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BOOL COLON COMMA DIVIDE DOUBLE DYNAMIC ELSE EQUALS FALSE FOR GQUAL ID IF INT LBRACE LDQMARK LESSTHAN LIST LPAREN LQUAL MAP MINUS MORETHAN NEW NOTEQUALS NUM NUMBER PLUS PRINT PUNTO RBRACE RDQMARK RPAREN SEMICOLON SET SQMARK STDIN STRING STRINGVAL TIMES TRUE VAR VOID WHILEsentencia : cuerpo\n                | cuerpo sentenciacuerpo : asignacion\n            | expresion\n            | comparacion\n            | sentenciasConditional\n            | sentenciasIterativas\n            | funcionesfunciones : declararFunc \n                 | usarFuncdeclararFunc : VOID ID LPAREN RPAREN LBRACE cuerpoBloque RBRACEcuerpoBloque : cuerpo\n                    | cuerpo cuerpoBloqueusarFunc : PRINT LPAREN STRINGVAL RPAREN SEMICOLONsentenciasConditional : sentenciaif\n                             | sentenciaelseif\n                             | sentenciaelsesentenciaif : IF LPAREN comparacion RPAREN LBRACE cuerpoBloque RBRACEsentenciaelseif : ELSE IF LPAREN comparacion RPAREN LBRACE cuerpoBloque RBRACEsentenciaelse : ELSE LBRACE cuerpoBloque RBRACEsentenciasIterativas : sentenciafor\n                            | sentenciawhileincremDecrem : ID PLUS PLUS\n                    | ID MINUS MINUSsentenciafor : FOR LPAREN asignacion comparacion SEMICOLON incremDecrem RPAREN LBRACE cuerpoBloque RBRACEsentenciawhile : WHILE LPAREN comparacion RPAREN LBRACE cuerpoBloque RBRACEasignacion : asignacionNumerica \n                  | asignacionString\n                  | asignacionBoolean\n                  | asignacionEstructuraDatosasignacionEstructuraDatos : asignacionList\n                                 | asignacionSet\n                                 | asignacionMapasignacionList : LIST LESSTHAN tipoPrimitivo MORETHAN ID SEMICOLONasignacionSet : SET ID ASSIGN NEW SET LPAREN RPAREN SEMICOLONasignacionMap : MAP LESSTHAN tipoPrimitivo COMMA tipoPrimitivo MORETHAN ID SEMICOLONasignacionBoolean : BOOL ID ASSIGN expresionBoolean SEMICOLONasignacionNumerica : tipoNumeric ID ASSIGN expresion SEMICOLONasignacionString : tipoString ID ASSIGN expresionString SEMICOLONexpresion : valorexpresionString : STRINGVALcomparacion : valor operadoresComp expresionexpresion : valor operadoresMat expresionexpresionBoolean : TRUE\n                        | FALSEoperadoresMat : MINUS\n                    | PLUS\n                    | TIMES\n                    | DIVIDEoperadoresComp : MORETHAN\n                        | LESSTHAN\n                        | GQUAL\n                        | LQUAL\n                        | NOTEQUALS\n                        | EQUALSvalor : NUMBER\n             | IDtipoPrimitivo : tipoNumeric\n                     | tipoStringtipoNumeric : NUM\n                   | INT\n                   | DOUBLEtipoString : STRING\n                  | VAR\n                  | DYNAMIC'
    
_lr_action_items = {'BOOL':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[24,24,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,24,24,-40,-43,-42,24,-20,-38,-39,-37,24,24,24,-14,24,-34,-18,-26,-11,-19,24,-35,-36,-25,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,45,46,47,48,49,50,51,52,53,54,55,56,60,62,64,70,71,72,73,78,80,81,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[28,28,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,28,28,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,28,28,28,-40,-43,-42,28,28,28,28,-20,-38,-39,-37,28,28,28,-14,28,-34,-18,-26,-11,-19,28,-35,-36,-25,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,35,36,37,38,39,40,42,45,46,47,48,49,50,51,52,53,54,55,56,60,62,64,70,71,72,73,78,80,81,98,104,107,108,109,110,112,113,114,115,120,125,127,128,133,134,137,138,141,142,144,],[22,22,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,57,-57,58,59,-31,-32,-33,-56,65,-60,-61,-62,-63,-64,-65,68,22,22,-46,-47,-48,-49,-50,-51,-52,-53,-54,-55,22,22,22,-40,-43,-42,22,22,22,22,-20,116,-38,-39,-37,22,122,22,22,-14,22,-34,136,-18,-26,-11,-19,22,-35,-36,-25,]),'IF':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,30,62,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[29,29,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,61,29,-40,-43,-42,29,-20,-38,-39,-37,29,29,29,-14,29,-34,-18,-26,-11,-19,29,-35,-36,-25,]),'ELSE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[30,30,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,30,-40,-43,-42,30,-20,-38,-39,-37,30,30,30,-14,30,-34,-18,-26,-11,-19,30,-35,-36,-25,]),'FOR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[31,31,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,31,-40,-43,-42,31,-20,-38,-39,-37,31,31,31,-14,31,-34,-18,-26,-11,-19,31,-35,-36,-25,]),'WHILE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[32,32,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,32,-40,-43,-42,32,-20,-38,-39,-37,32,32,32,-14,32,-34,-18,-26,-11,-19,32,-35,-36,-25,]),'VOID':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[33,33,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,33,-40,-43,-42,33,-20,-38,-39,-37,33,33,33,-14,33,-34,-18,-26,-11,-19,33,-35,-36,-25,]),'PRINT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[34,34,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,34,-40,-43,-42,34,-20,-38,-39,-37,34,34,34,-14,34,-34,-18,-26,-11,-19,34,-35,-36,-25,]),'NUM':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,67,69,70,71,72,80,98,106,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[35,35,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,35,35,35,35,-40,-43,-42,35,-20,35,-38,-39,-37,35,35,35,-14,35,-34,-18,-26,-11,-19,35,-35,-36,-25,]),'INT':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,67,69,70,71,72,80,98,106,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[36,36,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,36,36,36,36,-40,-43,-42,36,-20,36,-38,-39,-37,36,36,36,-14,36,-34,-18,-26,-11,-19,36,-35,-36,-25,]),'DOUBLE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,67,69,70,71,72,80,98,106,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[37,37,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,37,37,37,37,-40,-43,-42,37,-20,37,-38,-39,-37,37,37,37,-14,37,-34,-18,-26,-11,-19,37,-35,-36,-25,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,67,69,70,71,72,80,98,106,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[38,38,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,38,38,38,38,-40,-43,-42,38,-20,38,-38,-39,-37,38,38,38,-14,38,-34,-18,-26,-11,-19,38,-35,-36,-25,]),'VAR':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,67,69,70,71,72,80,98,106,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[39,39,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,39,39,39,39,-40,-43,-42,39,-20,39,-38,-39,-37,39,39,39,-14,39,-34,-18,-26,-11,-19,39,-35,-36,-25,]),'DYNAMIC':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,67,69,70,71,72,80,98,106,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[40,40,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,40,40,40,40,-40,-43,-42,40,-20,40,-38,-39,-37,40,40,40,-14,40,-34,-18,-26,-11,-19,40,-35,-36,-25,]),'LIST':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[41,41,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,41,41,-40,-43,-42,41,-20,-38,-39,-37,41,41,41,-14,41,-34,-18,-26,-11,-19,41,-35,-36,-25,]),'SET':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,70,71,72,80,98,105,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[42,42,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,42,42,-40,-43,-42,42,-20,117,-38,-39,-37,42,42,42,-14,42,-34,-18,-26,-11,-19,42,-35,-36,-25,]),'MAP':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,62,63,70,71,72,80,98,107,108,109,110,113,114,115,120,125,128,133,134,137,138,141,142,144,],[43,43,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,43,43,-40,-43,-42,43,-20,-38,-39,-37,43,43,43,-14,43,-34,-18,-26,-11,-19,43,-35,-36,-25,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,44,70,71,72,98,107,108,109,115,125,128,133,134,137,141,142,144,],[0,-1,-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,-2,-40,-43,-42,-20,-38,-39,-37,-14,-34,-18,-26,-11,-19,-35,-36,-25,]),'RBRACE':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,22,25,26,27,28,70,71,72,79,80,98,99,107,108,109,115,119,123,124,125,128,129,133,134,137,141,142,143,144,],[-3,-4,-5,-6,-7,-8,-27,-28,-29,-30,-40,-15,-16,-17,-21,-22,-9,-10,-57,-31,-32,-33,-56,-40,-43,-42,98,-12,-20,-13,-38,-39,-37,-14,128,133,134,-34,-18,137,-26,-11,-19,-35,-36,144,-25,]),'MINUS':([13,22,28,70,122,132,],[47,-57,-56,47,132,140,]),'PLUS':([13,22,28,70,122,131,],[48,-57,-56,48,131,139,]),'TIMES':([13,22,28,70,],[49,-57,-56,49,]),'DIVIDE':([13,22,28,70,],[50,-57,-56,50,]),'MORETHAN':([13,22,28,35,36,37,38,39,40,77,85,86,87,118,],[51,-57,-56,-60,-61,-62,-63,-64,-65,51,104,-58,-59,127,]),'LESSTHAN':([13,22,28,41,43,77,],[52,-57,-56,67,69,52,]),'GQUAL':([13,22,28,77,],[53,-57,-56,53,]),'LQUAL':([13,22,28,77,],[54,-57,-56,54,]),'NOTEQUALS':([13,22,28,77,],[55,-57,-56,55,]),'EQUALS':([13,22,28,77,],[56,-57,-56,56,]),'RPAREN':([22,28,70,71,72,76,82,83,84,97,121,126,139,140,],[-57,-56,-40,-43,-42,96,101,102,103,111,130,135,-23,-24,]),'SEMICOLON':([22,28,70,71,72,90,91,92,93,94,95,100,103,116,135,136,],[-57,-56,-40,-43,-42,107,108,-41,109,-44,-45,112,115,125,141,142,]),'LPAREN':([29,31,32,34,61,65,117,],[60,63,64,66,78,83,126,]),'LBRACE':([30,96,101,102,111,130,],[62,110,113,114,120,138,]),'COMMA':([35,36,37,38,39,40,86,87,89,],[-60,-61,-62,-63,-64,-65,-58,-59,106,]),'ASSIGN':([57,58,59,68,],[73,74,75,88,]),'STRINGVAL':([66,74,],[84,92,]),'TRUE':([75,],[94,]),'FALSE':([75,],[95,]),'NEW':([88,],[105,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,2,],[1,44,]),'cuerpo':([0,2,62,80,110,113,114,120,138,],[2,2,80,80,80,80,80,80,80,]),'asignacion':([0,2,62,63,80,110,113,114,120,138,],[3,3,3,81,3,3,3,3,3,3,]),'expresion':([0,2,45,46,62,73,80,110,113,114,120,138,],[4,4,71,72,4,90,4,4,4,4,4,4,]),'comparacion':([0,2,60,62,64,78,80,81,110,113,114,120,138,],[5,5,76,5,82,97,5,100,5,5,5,5,5,]),'sentenciasConditional':([0,2,62,80,110,113,114,120,138,],[6,6,6,6,6,6,6,6,6,]),'sentenciasIterativas':([0,2,62,80,110,113,114,120,138,],[7,7,7,7,7,7,7,7,7,]),'funciones':([0,2,62,80,110,113,114,120,138,],[8,8,8,8,8,8,8,8,8,]),'asignacionNumerica':([0,2,62,63,80,110,113,114,120,138,],[9,9,9,9,9,9,9,9,9,9,]),'asignacionString':([0,2,62,63,80,110,113,114,120,138,],[10,10,10,10,10,10,10,10,10,10,]),'asignacionBoolean':([0,2,62,63,80,110,113,114,120,138,],[11,11,11,11,11,11,11,11,11,11,]),'asignacionEstructuraDatos':([0,2,62,63,80,110,113,114,120,138,],[12,12,12,12,12,12,12,12,12,12,]),'valor':([0,2,45,46,60,62,64,73,78,80,81,110,113,114,120,138,],[13,13,70,70,77,13,77,70,77,13,77,13,13,13,13,13,]),'sentenciaif':([0,2,62,80,110,113,114,120,138,],[14,14,14,14,14,14,14,14,14,]),'sentenciaelseif':([0,2,62,80,110,113,114,120,138,],[15,15,15,15,15,15,15,15,15,]),'sentenciaelse':([0,2,62,80,110,113,114,120,138,],[16,16,16,16,16,16,16,16,16,]),'sentenciafor':([0,2,62,80,110,113,114,120,138,],[17,17,17,17,17,17,17,17,17,]),'sentenciawhile':([0,2,62,80,110,113,114,120,138,],[18,18,18,18,18,18,18,18,18,]),'declararFunc':([0,2,62,80,110,113,114,120,138,],[19,19,19,19,19,19,19,19,19,]),'usarFunc':([0,2,62,80,110,113,114,120,138,],[20,20,20,20,20,20,20,20,20,]),'tipoNumeric':([0,2,62,63,67,69,80,106,110,113,114,120,138,],[21,21,21,21,86,86,21,86,21,21,21,21,21,]),'tipoString':([0,2,62,63,67,69,80,106,110,113,114,120,138,],[23,23,23,23,87,87,23,87,23,23,23,23,23,]),'asignacionList':([0,2,62,63,80,110,113,114,120,138,],[25,25,25,25,25,25,25,25,25,25,]),'asignacionSet':([0,2,62,63,80,110,113,114,120,138,],[26,26,26,26,26,26,26,26,26,26,]),'asignacionMap':([0,2,62,63,80,110,113,114,120,138,],[27,27,27,27,27,27,27,27,27,27,]),'operadoresMat':([13,70,],[45,45,]),'operadoresComp':([13,77,],[46,46,]),'cuerpoBloque':([62,80,110,113,114,120,138,],[79,99,119,123,124,129,143,]),'tipoPrimitivo':([67,69,106,],[85,89,118,]),'expresionString':([74,],[91,]),'expresionBoolean':([75,],[93,]),'incremDecrem':([112,],[121,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> cuerpo','sentencia',1,'p_sentencia','Yacc.py',9),
  ('sentencia -> cuerpo sentencia','sentencia',2,'p_sentencia','Yacc.py',10),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','Yacc.py',13),
  ('cuerpo -> expresion','cuerpo',1,'p_cuerpo','Yacc.py',14),
  ('cuerpo -> comparacion','cuerpo',1,'p_cuerpo','Yacc.py',15),
  ('cuerpo -> sentenciasConditional','cuerpo',1,'p_cuerpo','Yacc.py',16),
  ('cuerpo -> sentenciasIterativas','cuerpo',1,'p_cuerpo','Yacc.py',17),
  ('cuerpo -> funciones','cuerpo',1,'p_cuerpo','Yacc.py',18),
  ('funciones -> declararFunc','funciones',1,'p_funciones','Yacc.py',21),
  ('funciones -> usarFunc','funciones',1,'p_funciones','Yacc.py',22),
  ('declararFunc -> VOID ID LPAREN RPAREN LBRACE cuerpoBloque RBRACE','declararFunc',7,'p_declararFunc','Yacc.py',25),
  ('cuerpoBloque -> cuerpo','cuerpoBloque',1,'p_cuerpoBloque','Yacc.py',28),
  ('cuerpoBloque -> cuerpo cuerpoBloque','cuerpoBloque',2,'p_cuerpoBloque','Yacc.py',29),
  ('usarFunc -> PRINT LPAREN STRINGVAL RPAREN SEMICOLON','usarFunc',5,'p_usarFunc','Yacc.py',32),
  ('sentenciasConditional -> sentenciaif','sentenciasConditional',1,'p_sentenciasConditional','Yacc.py',35),
  ('sentenciasConditional -> sentenciaelseif','sentenciasConditional',1,'p_sentenciasConditional','Yacc.py',36),
  ('sentenciasConditional -> sentenciaelse','sentenciasConditional',1,'p_sentenciasConditional','Yacc.py',37),
  ('sentenciaif -> IF LPAREN comparacion RPAREN LBRACE cuerpoBloque RBRACE','sentenciaif',7,'p_sentenciaif','Yacc.py',40),
  ('sentenciaelseif -> ELSE IF LPAREN comparacion RPAREN LBRACE cuerpoBloque RBRACE','sentenciaelseif',8,'p_sentenciaelseif','Yacc.py',43),
  ('sentenciaelse -> ELSE LBRACE cuerpoBloque RBRACE','sentenciaelse',4,'p_sentenciaelse','Yacc.py',46),
  ('sentenciasIterativas -> sentenciafor','sentenciasIterativas',1,'p_sentenciasIterativas','Yacc.py',49),
  ('sentenciasIterativas -> sentenciawhile','sentenciasIterativas',1,'p_sentenciasIterativas','Yacc.py',50),
  ('incremDecrem -> ID PLUS PLUS','incremDecrem',3,'p_incremDecrem','Yacc.py',53),
  ('incremDecrem -> ID MINUS MINUS','incremDecrem',3,'p_incremDecrem','Yacc.py',54),
  ('sentenciafor -> FOR LPAREN asignacion comparacion SEMICOLON incremDecrem RPAREN LBRACE cuerpoBloque RBRACE','sentenciafor',10,'p_sentenciafor','Yacc.py',57),
  ('sentenciawhile -> WHILE LPAREN comparacion RPAREN LBRACE cuerpoBloque RBRACE','sentenciawhile',7,'p_sentenciawhile','Yacc.py',60),
  ('asignacion -> asignacionNumerica','asignacion',1,'p_asignacion','Yacc.py',63),
  ('asignacion -> asignacionString','asignacion',1,'p_asignacion','Yacc.py',64),
  ('asignacion -> asignacionBoolean','asignacion',1,'p_asignacion','Yacc.py',65),
  ('asignacion -> asignacionEstructuraDatos','asignacion',1,'p_asignacion','Yacc.py',66),
  ('asignacionEstructuraDatos -> asignacionList','asignacionEstructuraDatos',1,'p_asignacionEstructuraDatos','Yacc.py',69),
  ('asignacionEstructuraDatos -> asignacionSet','asignacionEstructuraDatos',1,'p_asignacionEstructuraDatos','Yacc.py',70),
  ('asignacionEstructuraDatos -> asignacionMap','asignacionEstructuraDatos',1,'p_asignacionEstructuraDatos','Yacc.py',71),
  ('asignacionList -> LIST LESSTHAN tipoPrimitivo MORETHAN ID SEMICOLON','asignacionList',6,'p_asignacionList','Yacc.py',74),
  ('asignacionSet -> SET ID ASSIGN NEW SET LPAREN RPAREN SEMICOLON','asignacionSet',8,'p_asignacionSet','Yacc.py',77),
  ('asignacionMap -> MAP LESSTHAN tipoPrimitivo COMMA tipoPrimitivo MORETHAN ID SEMICOLON','asignacionMap',8,'p_asignacionMap','Yacc.py',80),
  ('asignacionBoolean -> BOOL ID ASSIGN expresionBoolean SEMICOLON','asignacionBoolean',5,'p_asignacionBoolean','Yacc.py',83),
  ('asignacionNumerica -> tipoNumeric ID ASSIGN expresion SEMICOLON','asignacionNumerica',5,'p_asignacionNumerica','Yacc.py',86),
  ('asignacionString -> tipoString ID ASSIGN expresionString SEMICOLON','asignacionString',5,'p_asignacionString','Yacc.py',89),
  ('expresion -> valor','expresion',1,'p_expresion','Yacc.py',92),
  ('expresionString -> STRINGVAL','expresionString',1,'p_expresionString','Yacc.py',95),
  ('comparacion -> valor operadoresComp expresion','comparacion',3,'p_comparacion','Yacc.py',98),
  ('expresion -> valor operadoresMat expresion','expresion',3,'p_expresion_matematica','Yacc.py',101),
  ('expresionBoolean -> TRUE','expresionBoolean',1,'p_expresionBoolean','Yacc.py',104),
  ('expresionBoolean -> FALSE','expresionBoolean',1,'p_expresionBoolean','Yacc.py',105),
  ('operadoresMat -> MINUS','operadoresMat',1,'p_operadoresMat','Yacc.py',108),
  ('operadoresMat -> PLUS','operadoresMat',1,'p_operadoresMat','Yacc.py',109),
  ('operadoresMat -> TIMES','operadoresMat',1,'p_operadoresMat','Yacc.py',110),
  ('operadoresMat -> DIVIDE','operadoresMat',1,'p_operadoresMat','Yacc.py',111),
  ('operadoresComp -> MORETHAN','operadoresComp',1,'p_operadoresComp','Yacc.py',114),
  ('operadoresComp -> LESSTHAN','operadoresComp',1,'p_operadoresComp','Yacc.py',115),
  ('operadoresComp -> GQUAL','operadoresComp',1,'p_operadoresComp','Yacc.py',116),
  ('operadoresComp -> LQUAL','operadoresComp',1,'p_operadoresComp','Yacc.py',117),
  ('operadoresComp -> NOTEQUALS','operadoresComp',1,'p_operadoresComp','Yacc.py',118),
  ('operadoresComp -> EQUALS','operadoresComp',1,'p_operadoresComp','Yacc.py',119),
  ('valor -> NUMBER','valor',1,'p_valor','Yacc.py',122),
  ('valor -> ID','valor',1,'p_valor','Yacc.py',123),
  ('tipoPrimitivo -> tipoNumeric','tipoPrimitivo',1,'p_tipoPrimitivo','Yacc.py',126),
  ('tipoPrimitivo -> tipoString','tipoPrimitivo',1,'p_tipoPrimitivo','Yacc.py',127),
  ('tipoNumeric -> NUM','tipoNumeric',1,'p_tipoNumeric','Yacc.py',130),
  ('tipoNumeric -> INT','tipoNumeric',1,'p_tipoNumeric','Yacc.py',131),
  ('tipoNumeric -> DOUBLE','tipoNumeric',1,'p_tipoNumeric','Yacc.py',132),
  ('tipoString -> STRING','tipoString',1,'p_tipoString','Yacc.py',135),
  ('tipoString -> VAR','tipoString',1,'p_tipoString','Yacc.py',136),
  ('tipoString -> DYNAMIC','tipoString',1,'p_tipoString','Yacc.py',137),
]
