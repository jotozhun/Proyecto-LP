
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD ASSIGN BOOL COLON COMMA DIVIDE DOUBLE DYNAMIC ELSE EQUALS FALSE FOR GQUAL ID IF INT LBRACE LDQMARK LESSTHAN LIST LPAREN LQUAL MAP MINUS MORETHAN NEW NOTEQUALS NUM NUMBER PLUS PRINT PUNTO RBRACE RDQMARK RPAREN SEMICOLON SET SQMARK STDIN STRING STRINGVAL TIMES TRUE VAR VOID WHILEsentencia : cuerpo\n                | cuerpo sentencia\n                | declararFuncMultiplecuerpo : asignacion\n            | expresionMat\n            | expresionComp\n            | sentenciasConditional\n            | sentenciasIterativas\n            | usarFuncdeclararFuncMultiple : declararFunc\n                            | declararFunc declararFuncMultipledeclararFunc : declararFuncNoArgs\n                    | declararFuncArgsdeclararFuncArgs : VOID ID LPAREN funcArgumentos RPAREN LBRACE cuerpoBloque RBRACEfuncArgumentos : argumento\n                      | argumento COMMA funcArgumentosargumento : asignacionNum\n                 | asignacionStrdeclararFuncNoArgs : VOID ID LPAREN RPAREN LBRACE cuerpoBloque RBRACEcuerpoBloque : cuerpo\n                    | cuerpo cuerpoBloqueusarFunc : PRINT LPAREN STRINGVAL RPAREN SEMICOLON\n                | PRINT LPAREN NUMBER RPAREN SEMICOLON\n                | PRINT LPAREN ID RPAREN SEMICOLONsentenciasConditional : sentenciaif\n                             | sentenciaif anidadaelseif\n                             | sentenciaif sentenciaelseanidadaelseif : sentenciaelseif\n                    |   sentenciaelseif anidadaelseif\n                    |   sentenciaelseif sentenciaelsesentenciaif : IF LPAREN expresionComp RPAREN LBRACE cuerpoBloque RBRACEsentenciaelseif :  ELSE IF LPAREN expresionComp RPAREN LBRACE cuerpoBloque RBRACEsentenciaelse :  ELSE LBRACE cuerpoBloque RBRACEsentenciasIterativas : sentenciafor\n                            | sentenciawhileincremDecrem : ID PLUS PLUS\n                    | ID MINUS MINUSsentenciafor : FOR LPAREN asignacion expresionComp SEMICOLON incremDecrem RPAREN LBRACE cuerpoBloque RBRACEsentenciawhile : WHILE LPAREN expresionComp RPAREN LBRACE cuerpoBloque RBRACEasignacion : asignacionNumerica SEMICOLON\n                  | asignacionString SEMICOLON\n                  | asignacionBoolean SEMICOLON\n                  | asignacionEstructuraDatos SEMICOLONasignacionEstructuraDatos : asignacionList\n                                 | asignacionSet\n                                 | asignacionMapasignacionList : LIST LESSTHAN tipoPrimitivo MORETHAN IDasignacionSet : SET ID ASSIGN NEW SET LPAREN RPARENasignacionMap : MAP LESSTHAN tipoPrimitivo COMMA tipoPrimitivo MORETHAN IDasignacionBoolean : BOOL ID ASSIGN expresionBooleanasignacionNumerica : asignacionNum\n                          | asignacionNumInitasignacionNum : tipoNumeric IDasignacionNumInit : tipoNumeric ID ASSIGN expresionMat\n                            | ID ASSIGN expresionMatasignacionString : asignacionStr\n                        | asignacionStrInitasignacionStr : tipoString IDasignacionStrInit : tipoString ID ASSIGN expresionStringexpresionString : STRINGVALexpresionComp : valor operadoresComp valorexpresionMat : valor operadoresMat valor\n                    | valorexpresionBoolean : TRUE\n                        | FALSEoperadoresMat : MINUS\n                    | PLUS\n                    | TIMES\n                    | DIVIDEoperadoresComp : MORETHAN\n                        | LESSTHAN\n                        | GQUAL\n                        | LQUAL\n                        | NOTEQUALS\n                        | EQUALSvalor : NUMBER\n             | IDtipoPrimitivo : tipoNumeric\n                     | tipoStringtipoNumeric : NUM\n                   | INT\n                   | DOUBLEtipoString : STRING\n                  | VAR\n                  | DYNAMIC'
    
_lr_action_items = {'PRINT':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[19,19,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,-62,-77,-61,-29,-30,19,19,-33,-22,-23,-24,19,19,19,19,19,-31,-39,19,-32,-38,]),'BOOL':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[28,28,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,28,-62,-77,-61,-29,-30,28,28,-33,-22,-23,-24,28,28,28,28,28,-31,-39,28,-32,-38,]),'NUMBER':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,72,74,81,82,83,84,85,86,96,100,108,109,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[20,20,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,20,20,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-26,-27,-28,89,20,20,20,-62,-77,-61,-29,-30,20,20,20,20,20,-33,-22,-23,-24,20,20,20,20,20,-31,-39,20,-32,-38,]),'ID':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,28,35,36,37,39,41,42,43,44,45,46,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,70,72,73,74,81,82,83,84,85,86,96,100,108,109,124,125,129,132,135,136,137,138,139,140,141,155,158,159,160,164,170,174,176,],[21,21,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,71,75,76,77,79,-80,-81,-82,-83,-84,-85,-40,-41,-42,-43,82,82,-66,-67,-68,-69,-70,-71,-72,-73,-74,-75,-26,-27,-28,90,82,82,97,82,-62,-77,-61,-29,-30,21,82,82,21,82,144,145,146,-33,-22,-23,-24,21,152,21,21,21,168,21,-31,-39,21,-32,-38,]),'IF':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,68,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[32,32,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,87,-62,-77,-61,-29,-30,32,32,-33,-22,-23,-24,32,32,32,32,32,-31,-39,32,-32,-38,]),'FOR':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[33,33,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,-62,-77,-61,-29,-30,33,33,-33,-22,-23,-24,33,33,33,33,33,-31,-39,33,-32,-38,]),'WHILE':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[34,34,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,-62,-77,-61,-29,-30,34,34,-33,-22,-23,-24,34,34,34,34,34,-31,-39,34,-32,-38,]),'VOID':([0,2,4,5,6,7,8,9,10,15,16,17,18,20,21,22,23,49,50,51,52,65,66,67,81,82,83,84,85,132,135,136,137,160,164,165,173,174,176,],[35,35,-4,-5,-6,-7,-8,-9,35,-63,-25,-34,-35,-76,-77,-12,-13,-40,-41,-42,-43,-26,-27,-28,-62,-77,-61,-29,-30,-33,-22,-23,-24,-31,-39,-19,-14,-32,-38,]),'LIST':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[38,38,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,38,-62,-77,-61,-29,-30,38,38,-33,-22,-23,-24,38,38,38,38,38,-31,-39,38,-32,-38,]),'SET':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,81,82,83,84,85,86,108,130,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[39,39,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,39,-62,-77,-61,-29,-30,39,39,147,-33,-22,-23,-24,39,39,39,39,39,-31,-39,39,-32,-38,]),'MAP':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,81,82,83,84,85,86,108,132,135,136,137,138,140,141,155,159,160,164,170,174,176,],[40,40,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,40,-62,-77,-61,-29,-30,40,40,-33,-22,-23,-24,40,40,40,40,40,-31,-39,40,-32,-38,]),'NUM':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,78,80,81,82,83,84,85,86,99,108,131,132,135,136,137,138,140,141,143,155,159,160,164,170,174,176,],[41,41,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,41,41,41,-62,-77,-61,-29,-30,41,41,41,41,-33,-22,-23,-24,41,41,41,41,41,41,-31,-39,41,-32,-38,]),'INT':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,78,80,81,82,83,84,85,86,99,108,131,132,135,136,137,138,140,141,143,155,159,160,164,170,174,176,],[42,42,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,42,42,42,-62,-77,-61,-29,-30,42,42,42,42,-33,-22,-23,-24,42,42,42,42,42,42,-31,-39,42,-32,-38,]),'DOUBLE':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,78,80,81,82,83,84,85,86,99,108,131,132,135,136,137,138,140,141,143,155,159,160,164,170,174,176,],[43,43,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,43,43,43,-62,-77,-61,-29,-30,43,43,43,43,-33,-22,-23,-24,43,43,43,43,43,43,-31,-39,43,-32,-38,]),'STRING':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,78,80,81,82,83,84,85,86,99,108,131,132,135,136,137,138,140,141,143,155,159,160,164,170,174,176,],[44,44,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,44,44,44,-62,-77,-61,-29,-30,44,44,44,44,-33,-22,-23,-24,44,44,44,44,44,44,-31,-39,44,-32,-38,]),'VAR':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,78,80,81,82,83,84,85,86,99,108,131,132,135,136,137,138,140,141,143,155,159,160,164,170,174,176,],[45,45,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,45,45,45,-62,-77,-61,-29,-30,45,45,45,45,-33,-22,-23,-24,45,45,45,45,45,45,-31,-39,45,-32,-38,]),'DYNAMIC':([0,2,4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,73,78,80,81,82,83,84,85,86,99,108,131,132,135,136,137,138,140,141,143,155,159,160,164,170,174,176,],[46,46,-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,46,46,46,-62,-77,-61,-29,-30,46,46,46,46,-33,-22,-23,-24,46,46,46,46,46,46,-31,-39,46,-32,-38,]),'$end':([1,2,3,4,5,6,7,8,9,10,15,16,17,18,20,21,22,23,47,48,49,50,51,52,65,66,67,81,82,83,84,85,132,135,136,137,160,164,165,173,174,176,],[0,-1,-3,-4,-5,-6,-7,-8,-9,-10,-63,-25,-34,-35,-76,-77,-12,-13,-2,-11,-40,-41,-42,-43,-26,-27,-28,-62,-77,-61,-29,-30,-33,-22,-23,-24,-31,-39,-19,-14,-32,-38,]),'RBRACE':([4,5,6,7,8,9,15,16,17,18,20,21,49,50,51,52,65,66,67,81,82,83,84,85,107,108,132,133,135,136,137,150,153,154,160,164,166,169,174,175,176,],[-4,-5,-6,-7,-8,-9,-63,-25,-34,-35,-76,-77,-40,-41,-42,-43,-26,-27,-28,-62,-77,-61,-29,-30,132,-20,-33,-21,-22,-23,-24,160,164,165,-31,-39,173,174,-32,176,-38,]),'SEMICOLON':([11,12,13,14,20,24,25,26,27,29,30,31,76,77,81,82,83,91,92,110,111,112,113,114,115,117,126,127,128,146,167,168,],[49,50,51,52,-76,-51,-52,-56,-57,-44,-45,-46,-53,-58,-62,-77,-61,-55,-63,135,136,137,-50,-64,-65,139,-54,-59,-60,-47,-48,-49,]),'MINUS':([15,20,21,82,92,152,163,],[55,-76,-77,-77,55,163,172,]),'PLUS':([15,20,21,82,92,152,162,],[56,-76,-77,-77,56,162,171,]),'TIMES':([15,20,21,82,92,],[57,-76,-77,-77,57,]),'DIVIDE':([15,20,21,82,92,],[58,-76,-77,-77,58,]),'MORETHAN':([15,20,21,41,42,43,44,45,46,82,95,102,103,104,148,],[59,-76,-77,-80,-81,-82,-83,-84,-85,-77,59,129,-78,-79,158,]),'LESSTHAN':([15,20,21,38,40,82,95,],[60,-76,-77,78,80,-77,60,]),'GQUAL':([15,20,21,82,95,],[61,-76,-77,-77,61,]),'LQUAL':([15,20,21,82,95,],[62,-76,-77,-77,62,]),'NOTEQUALS':([15,20,21,82,95,],[63,-76,-77,-77,63,]),'EQUALS':([15,20,21,82,95,],[64,-76,-77,-77,64,]),'ELSE':([16,67,160,174,],[68,68,-31,-32,]),'LPAREN':([19,32,33,34,75,87,147,],[69,72,73,74,99,109,157,]),'RPAREN':([20,82,83,88,89,90,94,98,99,120,121,122,123,134,144,145,151,156,157,171,172,],[-76,-77,-61,110,111,112,116,118,119,142,-15,-17,-18,149,-53,-58,161,-16,167,-36,-37,]),'ASSIGN':([21,71,76,77,79,97,],[70,93,100,101,105,70,]),'COMMA':([41,42,43,44,45,46,103,104,106,121,122,123,144,145,],[-80,-81,-82,-83,-84,-85,-78,-79,131,143,-17,-18,-53,-58,]),'LBRACE':([68,116,118,119,142,149,161,],[86,138,140,141,155,159,170,]),'STRINGVAL':([69,101,],[88,128,]),'TRUE':([93,],[114,]),'FALSE':([93,],[115,]),'NEW':([105,],[130,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencia':([0,2,],[1,47,]),'cuerpo':([0,2,86,108,138,140,141,155,159,170,],[2,2,108,108,108,108,108,108,108,108,]),'declararFuncMultiple':([0,2,10,],[3,3,48,]),'asignacion':([0,2,73,86,108,138,140,141,155,159,170,],[4,4,96,4,4,4,4,4,4,4,4,]),'expresionMat':([0,2,70,86,100,108,138,140,141,155,159,170,],[5,5,91,5,126,5,5,5,5,5,5,5,]),'expresionComp':([0,2,72,74,86,96,108,109,138,140,141,155,159,170,],[6,6,94,98,6,117,6,134,6,6,6,6,6,6,]),'sentenciasConditional':([0,2,86,108,138,140,141,155,159,170,],[7,7,7,7,7,7,7,7,7,7,]),'sentenciasIterativas':([0,2,86,108,138,140,141,155,159,170,],[8,8,8,8,8,8,8,8,8,8,]),'usarFunc':([0,2,86,108,138,140,141,155,159,170,],[9,9,9,9,9,9,9,9,9,9,]),'declararFunc':([0,2,10,],[10,10,10,]),'asignacionNumerica':([0,2,73,86,108,138,140,141,155,159,170,],[11,11,11,11,11,11,11,11,11,11,11,]),'asignacionString':([0,2,73,86,108,138,140,141,155,159,170,],[12,12,12,12,12,12,12,12,12,12,12,]),'asignacionBoolean':([0,2,73,86,108,138,140,141,155,159,170,],[13,13,13,13,13,13,13,13,13,13,13,]),'asignacionEstructuraDatos':([0,2,73,86,108,138,140,141,155,159,170,],[14,14,14,14,14,14,14,14,14,14,14,]),'valor':([0,2,53,54,70,72,74,86,96,100,108,109,138,140,141,155,159,170,],[15,15,81,83,92,95,95,15,95,92,15,95,15,15,15,15,15,15,]),'sentenciaif':([0,2,86,108,138,140,141,155,159,170,],[16,16,16,16,16,16,16,16,16,16,]),'sentenciafor':([0,2,86,108,138,140,141,155,159,170,],[17,17,17,17,17,17,17,17,17,17,]),'sentenciawhile':([0,2,86,108,138,140,141,155,159,170,],[18,18,18,18,18,18,18,18,18,18,]),'declararFuncNoArgs':([0,2,10,],[22,22,22,]),'declararFuncArgs':([0,2,10,],[23,23,23,]),'asignacionNum':([0,2,73,86,99,108,138,140,141,143,155,159,170,],[24,24,24,24,122,24,24,24,24,122,24,24,24,]),'asignacionNumInit':([0,2,73,86,108,138,140,141,155,159,170,],[25,25,25,25,25,25,25,25,25,25,25,]),'asignacionStr':([0,2,73,86,99,108,138,140,141,143,155,159,170,],[26,26,26,26,123,26,26,26,26,123,26,26,26,]),'asignacionStrInit':([0,2,73,86,108,138,140,141,155,159,170,],[27,27,27,27,27,27,27,27,27,27,27,]),'asignacionList':([0,2,73,86,108,138,140,141,155,159,170,],[29,29,29,29,29,29,29,29,29,29,29,]),'asignacionSet':([0,2,73,86,108,138,140,141,155,159,170,],[30,30,30,30,30,30,30,30,30,30,30,]),'asignacionMap':([0,2,73,86,108,138,140,141,155,159,170,],[31,31,31,31,31,31,31,31,31,31,31,]),'tipoNumeric':([0,2,73,78,80,86,99,108,131,138,140,141,143,155,159,170,],[36,36,36,103,103,36,124,36,103,36,36,36,124,36,36,36,]),'tipoString':([0,2,73,78,80,86,99,108,131,138,140,141,143,155,159,170,],[37,37,37,104,104,37,125,37,104,37,37,37,125,37,37,37,]),'operadoresMat':([15,92,],[53,53,]),'operadoresComp':([15,95,],[54,54,]),'anidadaelseif':([16,67,],[65,84,]),'sentenciaelse':([16,67,],[66,85,]),'sentenciaelseif':([16,67,],[67,67,]),'tipoPrimitivo':([78,80,131,],[102,106,148,]),'cuerpoBloque':([86,108,138,140,141,155,159,170,],[107,133,150,153,154,166,169,175,]),'expresionBoolean':([93,],[113,]),'funcArgumentos':([99,143,],[120,156,]),'argumento':([99,143,],[121,121,]),'expresionString':([101,],[127,]),'incremDecrem':([139,],[151,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencia","S'",1,None,None,None),
  ('sentencia -> cuerpo','sentencia',1,'p_sentencia','Yacc.py',9),
  ('sentencia -> cuerpo sentencia','sentencia',2,'p_sentencia','Yacc.py',10),
  ('sentencia -> declararFuncMultiple','sentencia',1,'p_sentencia','Yacc.py',11),
  ('cuerpo -> asignacion','cuerpo',1,'p_cuerpo','Yacc.py',14),
  ('cuerpo -> expresionMat','cuerpo',1,'p_cuerpo','Yacc.py',15),
  ('cuerpo -> expresionComp','cuerpo',1,'p_cuerpo','Yacc.py',16),
  ('cuerpo -> sentenciasConditional','cuerpo',1,'p_cuerpo','Yacc.py',17),
  ('cuerpo -> sentenciasIterativas','cuerpo',1,'p_cuerpo','Yacc.py',18),
  ('cuerpo -> usarFunc','cuerpo',1,'p_cuerpo','Yacc.py',19),
  ('declararFuncMultiple -> declararFunc','declararFuncMultiple',1,'p_declararFuncMultiple','Yacc.py',22),
  ('declararFuncMultiple -> declararFunc declararFuncMultiple','declararFuncMultiple',2,'p_declararFuncMultiple','Yacc.py',23),
  ('declararFunc -> declararFuncNoArgs','declararFunc',1,'p_declararFunc','Yacc.py',26),
  ('declararFunc -> declararFuncArgs','declararFunc',1,'p_declararFunc','Yacc.py',27),
  ('declararFuncArgs -> VOID ID LPAREN funcArgumentos RPAREN LBRACE cuerpoBloque RBRACE','declararFuncArgs',8,'p_declararFuncArgs','Yacc.py',30),
  ('funcArgumentos -> argumento','funcArgumentos',1,'p_funcArgumentos','Yacc.py',33),
  ('funcArgumentos -> argumento COMMA funcArgumentos','funcArgumentos',3,'p_funcArgumentos','Yacc.py',34),
  ('argumento -> asignacionNum','argumento',1,'p_argumentos','Yacc.py',37),
  ('argumento -> asignacionStr','argumento',1,'p_argumentos','Yacc.py',38),
  ('declararFuncNoArgs -> VOID ID LPAREN RPAREN LBRACE cuerpoBloque RBRACE','declararFuncNoArgs',7,'p_declararFuncNoArgs','Yacc.py',41),
  ('cuerpoBloque -> cuerpo','cuerpoBloque',1,'p_cuerpoBloque','Yacc.py',44),
  ('cuerpoBloque -> cuerpo cuerpoBloque','cuerpoBloque',2,'p_cuerpoBloque','Yacc.py',45),
  ('usarFunc -> PRINT LPAREN STRINGVAL RPAREN SEMICOLON','usarFunc',5,'p_usarFunc','Yacc.py',48),
  ('usarFunc -> PRINT LPAREN NUMBER RPAREN SEMICOLON','usarFunc',5,'p_usarFunc','Yacc.py',49),
  ('usarFunc -> PRINT LPAREN ID RPAREN SEMICOLON','usarFunc',5,'p_usarFunc','Yacc.py',50),
  ('sentenciasConditional -> sentenciaif','sentenciasConditional',1,'p_sentenciasConditional','Yacc.py',53),
  ('sentenciasConditional -> sentenciaif anidadaelseif','sentenciasConditional',2,'p_sentenciasConditional','Yacc.py',54),
  ('sentenciasConditional -> sentenciaif sentenciaelse','sentenciasConditional',2,'p_sentenciasConditional','Yacc.py',55),
  ('anidadaelseif -> sentenciaelseif','anidadaelseif',1,'p_anidadaelseif','Yacc.py',57),
  ('anidadaelseif -> sentenciaelseif anidadaelseif','anidadaelseif',2,'p_anidadaelseif','Yacc.py',58),
  ('anidadaelseif -> sentenciaelseif sentenciaelse','anidadaelseif',2,'p_anidadaelseif','Yacc.py',59),
  ('sentenciaif -> IF LPAREN expresionComp RPAREN LBRACE cuerpoBloque RBRACE','sentenciaif',7,'p_sentenciaif','Yacc.py',63),
  ('sentenciaelseif -> ELSE IF LPAREN expresionComp RPAREN LBRACE cuerpoBloque RBRACE','sentenciaelseif',8,'p_sentenciaelseif','Yacc.py',66),
  ('sentenciaelse -> ELSE LBRACE cuerpoBloque RBRACE','sentenciaelse',4,'p_sentenciaelse','Yacc.py',69),
  ('sentenciasIterativas -> sentenciafor','sentenciasIterativas',1,'p_sentenciasIterativas','Yacc.py',76),
  ('sentenciasIterativas -> sentenciawhile','sentenciasIterativas',1,'p_sentenciasIterativas','Yacc.py',77),
  ('incremDecrem -> ID PLUS PLUS','incremDecrem',3,'p_incremDecrem','Yacc.py',80),
  ('incremDecrem -> ID MINUS MINUS','incremDecrem',3,'p_incremDecrem','Yacc.py',81),
  ('sentenciafor -> FOR LPAREN asignacion expresionComp SEMICOLON incremDecrem RPAREN LBRACE cuerpoBloque RBRACE','sentenciafor',10,'p_sentenciafor','Yacc.py',84),
  ('sentenciawhile -> WHILE LPAREN expresionComp RPAREN LBRACE cuerpoBloque RBRACE','sentenciawhile',7,'p_sentenciawhile','Yacc.py',87),
  ('asignacion -> asignacionNumerica SEMICOLON','asignacion',2,'p_asignacion','Yacc.py',90),
  ('asignacion -> asignacionString SEMICOLON','asignacion',2,'p_asignacion','Yacc.py',91),
  ('asignacion -> asignacionBoolean SEMICOLON','asignacion',2,'p_asignacion','Yacc.py',92),
  ('asignacion -> asignacionEstructuraDatos SEMICOLON','asignacion',2,'p_asignacion','Yacc.py',93),
  ('asignacionEstructuraDatos -> asignacionList','asignacionEstructuraDatos',1,'p_asignacionEstructuraDatos','Yacc.py',96),
  ('asignacionEstructuraDatos -> asignacionSet','asignacionEstructuraDatos',1,'p_asignacionEstructuraDatos','Yacc.py',97),
  ('asignacionEstructuraDatos -> asignacionMap','asignacionEstructuraDatos',1,'p_asignacionEstructuraDatos','Yacc.py',98),
  ('asignacionList -> LIST LESSTHAN tipoPrimitivo MORETHAN ID','asignacionList',5,'p_asignacionList','Yacc.py',101),
  ('asignacionSet -> SET ID ASSIGN NEW SET LPAREN RPAREN','asignacionSet',7,'p_asignacionSet','Yacc.py',104),
  ('asignacionMap -> MAP LESSTHAN tipoPrimitivo COMMA tipoPrimitivo MORETHAN ID','asignacionMap',7,'p_asignacionMap','Yacc.py',107),
  ('asignacionBoolean -> BOOL ID ASSIGN expresionBoolean','asignacionBoolean',4,'p_asignacionBoolean','Yacc.py',110),
  ('asignacionNumerica -> asignacionNum','asignacionNumerica',1,'p_asignacionNumerica','Yacc.py',113),
  ('asignacionNumerica -> asignacionNumInit','asignacionNumerica',1,'p_asignacionNumerica','Yacc.py',114),
  ('asignacionNum -> tipoNumeric ID','asignacionNum',2,'p_asignacionNum','Yacc.py',117),
  ('asignacionNumInit -> tipoNumeric ID ASSIGN expresionMat','asignacionNumInit',4,'p_asignacionNumInit','Yacc.py',120),
  ('asignacionNumInit -> ID ASSIGN expresionMat','asignacionNumInit',3,'p_asignacionNumInit','Yacc.py',121),
  ('asignacionString -> asignacionStr','asignacionString',1,'p_asignacionString','Yacc.py',124),
  ('asignacionString -> asignacionStrInit','asignacionString',1,'p_asignacionString','Yacc.py',125),
  ('asignacionStr -> tipoString ID','asignacionStr',2,'p_asignacionStr','Yacc.py',128),
  ('asignacionStrInit -> tipoString ID ASSIGN expresionString','asignacionStrInit',4,'p_asignacionStrInit','Yacc.py',131),
  ('expresionString -> STRINGVAL','expresionString',1,'p_expresionString','Yacc.py',134),
  ('expresionComp -> valor operadoresComp valor','expresionComp',3,'p_comparacion','Yacc.py',137),
  ('expresionMat -> valor operadoresMat valor','expresionMat',3,'p_expresion_matematica','Yacc.py',140),
  ('expresionMat -> valor','expresionMat',1,'p_expresion_matematica','Yacc.py',141),
  ('expresionBoolean -> TRUE','expresionBoolean',1,'p_expresionBoolean','Yacc.py',144),
  ('expresionBoolean -> FALSE','expresionBoolean',1,'p_expresionBoolean','Yacc.py',145),
  ('operadoresMat -> MINUS','operadoresMat',1,'p_operadoresMat','Yacc.py',148),
  ('operadoresMat -> PLUS','operadoresMat',1,'p_operadoresMat','Yacc.py',149),
  ('operadoresMat -> TIMES','operadoresMat',1,'p_operadoresMat','Yacc.py',150),
  ('operadoresMat -> DIVIDE','operadoresMat',1,'p_operadoresMat','Yacc.py',151),
  ('operadoresComp -> MORETHAN','operadoresComp',1,'p_operadoresComp','Yacc.py',154),
  ('operadoresComp -> LESSTHAN','operadoresComp',1,'p_operadoresComp','Yacc.py',155),
  ('operadoresComp -> GQUAL','operadoresComp',1,'p_operadoresComp','Yacc.py',156),
  ('operadoresComp -> LQUAL','operadoresComp',1,'p_operadoresComp','Yacc.py',157),
  ('operadoresComp -> NOTEQUALS','operadoresComp',1,'p_operadoresComp','Yacc.py',158),
  ('operadoresComp -> EQUALS','operadoresComp',1,'p_operadoresComp','Yacc.py',159),
  ('valor -> NUMBER','valor',1,'p_valor','Yacc.py',162),
  ('valor -> ID','valor',1,'p_valor','Yacc.py',163),
  ('tipoPrimitivo -> tipoNumeric','tipoPrimitivo',1,'p_tipoPrimitivo','Yacc.py',166),
  ('tipoPrimitivo -> tipoString','tipoPrimitivo',1,'p_tipoPrimitivo','Yacc.py',167),
  ('tipoNumeric -> NUM','tipoNumeric',1,'p_tipoNumeric','Yacc.py',170),
  ('tipoNumeric -> INT','tipoNumeric',1,'p_tipoNumeric','Yacc.py',171),
  ('tipoNumeric -> DOUBLE','tipoNumeric',1,'p_tipoNumeric','Yacc.py',172),
  ('tipoString -> STRING','tipoString',1,'p_tipoString','Yacc.py',175),
  ('tipoString -> VAR','tipoString',1,'p_tipoString','Yacc.py',176),
  ('tipoString -> DYNAMIC','tipoString',1,'p_tipoString','Yacc.py',177),
]
